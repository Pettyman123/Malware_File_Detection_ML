# Importing libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import joblib

# Load data
data = pd.read_csv('Malware_dataset.csv')
X = data.drop(['hash',
                'usage_counter', 
                'normal_prio',
                'policy',
                'vm_pgoff',
                'task_size',
                'cached_hole_size',
                'hiwater_rss',
                'nr_ptes',
                'lock',
                'cgtime',
                'signal_nvcsw'], axis = 1)
y = data['classification']


# Data handling
smote = SMOTE()
X_res, y_res = smote.fit(X, y)


#Splitting data
X_train, X_test, y_train, y_test = train_test_split(X_res, y_res)

#Data normalization
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
y_train = scaler.transform(y_train)

#Train RFM model
clf = RandomForestClassifier(n_estimators =100, random_state =42)
clf.fit(X_train, y_train)

#Test model
y_pred = clf.predict(X_test)
print("Accuracy:",accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

#Saving trained model
joblib.dump(clf, 'models/malware_detection_ML.pkl')


#hash,millisecond,classification,state,usage_counter,prio,static_prio,normal_prio,policy,vm_pgoff,vm_truncate_count,task_size,cached_hole_size,free_area_cache,mm_users,map_count,hiwater_rss,total_vm,shared_vm,exec_vm,reserved_vm,nr_ptes,end_data,last_interval,nvcsw,nivcsw,min_flt,maj_flt,fs_excl_counter,lock,utime,stime,gtime,cgtime,signal_nvcsw